[
  
  {
    "title": "Instalación de Plex con snap",
    "url": "/rx/posts/Instalacion-Plex-Snapd/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2024-05-23 04:00:00 +0000",
    





    
    "snippet": "Instalación de Plex Media Server con SnapPrerrequisitosAsegúrate de tener Snap instalado en tu sistema. La mayoría de las distribuciones modernas de Linux ya lo incluyen. Si no lo tienes, puedes in...",
    "content": "Instalación de Plex Media Server con SnapPrerrequisitosAsegúrate de tener Snap instalado en tu sistema. La mayoría de las distribuciones modernas de Linux ya lo incluyen. Si no lo tienes, puedes instalarlo siguiendo las instrucciones en snapcraft.io.Instalación de Plex Media Server  Actualizar el sistema:  Abre una terminal y actualiza el índice de paquetes de tu sistema:     sudo apt update sudo apt upgrade        Instalar Snap (si no está instalado):  Si Snap no está instalado, puedes hacerlo con el siguiente comando:      sudo apt install snapd        Instalar Plex Media Server:    sudo snap install plexmediaserver        Verificar la instalación:Configuración de Plex Media Server  Acceder a la interfaz web de Plex:  Abre un navegador web.  Navega a http://localhost:32400/web si estás accediendo desde la misma máquina donde instalaste Plex.  Si estás accediendo desde otra máquina en la misma red, reemplaza localhost con la dirección IP de tu servidor Plex.  Configuración inicial:  Sigue las instrucciones en pantalla para configurar Plex Media Server.  Necesitarás crear una cuenta de Plex o iniciar sesión con una cuenta existente.  Añadir bibliotecas de medios:  Durante la configuración, se te pedirá que añadas bibliotecas de medios.  Selecciona las carpetas que contienen tus archivos de video, música y fotos para que Plex pueda indexarlos y organizarlos."
  },
  
  {
    "title": "Instalación Docker y ejemplos",
    "url": "/rx/posts/Instalacion-Docker-Ejemplos-copy/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2024-05-23 04:00:00 +0000",
    





    
    "snippet": "¿Qué es Docker?Docker es una plataforma de software que permite crear, probar y desplegar aplicaciones rápidamente. Utiliza la tecnología de contenedores, que agrupa una aplicación y todas sus depe...",
    "content": "¿Qué es Docker?Docker es una plataforma de software que permite crear, probar y desplegar aplicaciones rápidamente. Utiliza la tecnología de contenedores, que agrupa una aplicación y todas sus dependencias en un único paquete llamado contenedor. Este contenedor puede ejecutarse de manera consistente en cualquier entorno, ya sea en una computadora personal, en servidores locales o en la nube. A continuación, se explican algunos conceptos clave relacionados con Docker:Contenedor: Es una unidad estándar de software que empaqueta el código de una aplicación y todas sus dependencias, de modo que la aplicación se ejecute de manera rápida y confiable en diferentes entornos informáticos. Los contenedores son más ligeros y rápidos que las máquinas virtuales, ya que no incluyen un sistema operativo completo.      Imagen: Es una plantilla de solo lectura utilizada para crear contenedores. Las imágenes definen lo que estará presente en el contenedor, incluyendo el sistema operativo base, las aplicaciones y las bibliotecas necesarias. Puedes pensar en una imagen como un archivo de plantilla que se utiliza para desplegar contenedores.        Dockerfile: Es un archivo de texto que contiene una serie de instrucciones para crear una imagen de Docker. Define lo que se incluirá en la imagen y cómo se configurará.        Registro de Docker (Docker Registry): Es un servicio para almacenar y distribuir imágenes de Docker. Docker Hub es el registro de imágenes público más conocido, aunque también se pueden configurar registros privados.        Orquestación: Herramientas como Kubernetes pueden gestionar contenedores Docker a gran escala, proporcionando capacidades avanzadas como despliegue, escalado y monitoreo de aplicaciones.  Beneficios de DockerPortabilidad: Los contenedores pueden ejecutarse en cualquier entorno que tenga Docker instalado, lo que asegura que las aplicaciones funcionen de la misma manera en desarrollo, pruebas y producción.Consistencia: Al empaquetar todo en un contenedor, se eliminan los problemas de “funciona en mi máquina” ya que el entorno es consistente.Eficiencia de Recursos: Los contenedores comparten el mismo núcleo del sistema operativo, lo que los hace más ligeros que las máquinas virtuales tradicionales.Velocidad: Los contenedores se inician y detienen más rápidamente que las máquinas virtuales, lo que acelera el desarrollo y las pruebas.Docker ha transformado significativamente el desarrollo y la implementación de software, facilitando la adopción de prácticas como la integración y entrega continua (CI/CD).Instalación de DockerSet up Docker’s apt repository.# Add Docker's official GPG key:sudo apt-get updatesudo apt-get install ca-certificates curlsudo install -m 0755 -d /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.ascsudo chmod a+r /etc/apt/keyrings/docker.asc# Add the repository to Apt sources:echo \\  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get updateTo install the latest version, run:sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-pluginVerify that the Docker Engine installation is successful by running the hello-world image.sudo docker run hello-worldInstalación de EasyAppointmentsUna vez instalado Docker vamos a instalar EasyAppointments:docker run --name some-mariadb -d -e MYSQL_ROOT_PASSWORD=hellodocker -e MYSQL_DATABASE=easyappointments mariadb:latestdocker run --name some-easyappointments -d --link some-mariadb:db -p 8888:8888 jamrizzi/easyappointments:latestUsageEnvironment Variable\tDeafult ValueBASE_URL\t“http://localhost:8888”LANGUAGE\t“english”DEBUG\tfalseDB_HOST\t“db”DB_NAME\t“easyappointments”DB_USERNAME\t“root”DB_PASSWORD\t“hellodocker”GOOGLE_SYNC_FEATURE\tfalseGOOGLE_PRODUCT_NAME\tGOOGLE_CLIENT_ID\tGOOGLE_CLIENT_SECRET\tGOOGLE_API_KEY\tTZ\t“UTC”Instalación de FreeScoutLa instalación de FreeScout se va a realizar de forma diferente a la que hemos visto previamente. El primer paso que vamos a realiza es crear el fichero con el nombre docker-compose.ym (Que el fichero se llame así es muy importante).vi docker-compose.ymCopiamos el contenido que vamos a pegar en el fichero que hemos creado previamente. Se pueden realizar diferentes cambios, como por ejemplo puertos, nombres, contraseñas y demás, pero el que si que si hay que cambiar es - SITE_URL donde hay que poner nuestra IP.version: '2'services:  freescout-app:    image: tiredofit/freescout    container_name: freescout-app    ports:    - 80:80    links:    - freescout-db    volumes:    ### If you want to perform customizations to the source and have access to it, then uncomment this line - This includes modules    #- ./data:/www/html    ### Or, if you just want to use Stock Freescout and hold onto persistent files like cache and session use this, one or the other.    - ./data:/data    ### If you want to just keep the original source and add additional modules uncomment this line    #- ./modules:/www/html/Modules    - ./logs/:/www/logs    environment:    - CONTAINER_NAME=freescout-app        - DB_HOST=freescout-db    - DB_NAME=freescout    - DB_USER=freescout    - DB_PASS=freescout    - SITE_URL=http://&lt;&lt;Ponemos la IP de nuestro ordenador&gt;&gt;    - ADMIN_EMAIL=admin@admin.com    - ADMIN_PASS=freescout    - ENABLE_SSL_PROXY=FALSE    - DISPLAY_ERRORS=FALSE    - TIMEZONE=America/Vancouver    restart: always  freescout-db:    image: tiredofit/mariadb    container_name: freescout-db    volumes:      - ./db:/var/lib/mysql    environment:      - ROOT_PASS=password      - DB_NAME=freescout      - DB_USER=freescout      - DB_PASS=freescout      - CONTAINER_NAME=freescout-db    restart: always  freescout-db-backup:    container_name: freescout-db-backup    image: tiredofit/db-backup    links:     - freescout-db    volumes:      - ./dbbackup:/backup    environment:      - CONTAINER_NAME=freescout-db-backup      - DB_HOST=freescout-db      - DB_TYPE=mariadb      - DB_NAME=freescout      - DB_USER=freescout      - DB_PASS=freescout      - DB01_BACKUP_INTERVAL=1440      - DB01_BACKUP_BEGIN=0000      - DB_CLEANUP_TIME=8640      - COMPRESSION=BZ      - MD5=TRUE    restart: alwaysCreamos los contenedores:docker compose up -dY ya solo queda probar nuestro servidor:http://«nuestra IP»"
  }
  
]

